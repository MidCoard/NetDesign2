// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: src/main/resources/protos/packet.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package top.focess.netdesign.proto;

@kotlin.jvm.JvmName("-initializefriendSendMessageRequest")
public inline fun friendSendMessageRequest(block: top.focess.netdesign.proto.FriendSendMessageRequestKt.Dsl.() -> kotlin.Unit): top.focess.netdesign.proto.PacketOuterClass.FriendSendMessageRequest =
  top.focess.netdesign.proto.FriendSendMessageRequestKt.Dsl._create(top.focess.netdesign.proto.PacketOuterClass.FriendSendMessageRequest.newBuilder()).apply { block() }._build()
/**
 * ```
 *packet id = 14
 * ```
 *
 * Protobuf type `netdesign2.FriendSendMessageRequest`
 */
public object FriendSendMessageRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: top.focess.netdesign.proto.PacketOuterClass.FriendSendMessageRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: top.focess.netdesign.proto.PacketOuterClass.FriendSendMessageRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): top.focess.netdesign.proto.PacketOuterClass.FriendSendMessageRequest = _builder.build()

    /**
     * `.netdesign2.RawMessage message = 1;`
     */
    public var message: top.focess.netdesign.proto.PacketOuterClass.RawMessage
      @JvmName("getMessage")
      get() = _builder.getMessage()
      @JvmName("setMessage")
      set(value) {
        _builder.setMessage(value)
      }
    /**
     * `.netdesign2.RawMessage message = 1;`
     */
    public fun clearMessage() {
      _builder.clearMessage()
    }
    /**
     * `.netdesign2.RawMessage message = 1;`
     * @return Whether the message field is set.
     */
    public fun hasMessage(): kotlin.Boolean {
      return _builder.hasMessage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun top.focess.netdesign.proto.PacketOuterClass.FriendSendMessageRequest.copy(block: `top.focess.netdesign.proto`.FriendSendMessageRequestKt.Dsl.() -> kotlin.Unit): top.focess.netdesign.proto.PacketOuterClass.FriendSendMessageRequest =
  `top.focess.netdesign.proto`.FriendSendMessageRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val top.focess.netdesign.proto.PacketOuterClass.FriendSendMessageRequestOrBuilder.messageOrNull: top.focess.netdesign.proto.PacketOuterClass.RawMessage?
  get() = if (hasMessage()) getMessage() else null

